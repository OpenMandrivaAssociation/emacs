--- src/image.c.orig	2013-03-04 00:28:23.183489243 +0000
+++ src/image.c	2013-03-04 00:30:21.763494041 +0000
@@ -7085,8 +7085,8 @@
 /* GIF library details.  */
 DEF_IMGLIB_FN (int, DGifCloseFile, (GifFileType *));
 DEF_IMGLIB_FN (int, DGifSlurp, (GifFileType *));
-DEF_IMGLIB_FN (GifFileType *, DGifOpen, (void *, InputFunc));
-DEF_IMGLIB_FN (GifFileType *, DGifOpenFileName, (const char *));
+DEF_IMGLIB_FN (GifFileType *, DGifOpen, (void *, InputFunc, int*));
+DEF_IMGLIB_FN (GifFileType *, DGifOpenFileName, (const char *, int*));
 
 static int
 init_gif_functions (Lisp_Object libraries)
@@ -7176,7 +7176,7 @@
 	}
 
       /* Open the GIF file.  */
-      gif = fn_DGifOpenFileName (SSDATA (file));
+      gif = fn_DGifOpenFileName (SSDATA (file), NULL);
       if (gif == NULL)
 	{
 	  image_error ("Cannot open `%s'", file, Qnil);
@@ -7197,7 +7197,7 @@
       memsrc.len = SBYTES (specified_data);
       memsrc.index = 0;
 
-      gif = fn_DGifOpen (&memsrc, gif_read_from_memory);
+      gif = fn_DGifOpen (&memsrc, gif_read_from_memory, NULL);
       if (!gif)
 	{
 	  image_error ("Cannot open memory source `%s'", img->spec, Qnil);
--- configure.in.orig	2013-03-04 00:26:40.842485101 +0000
+++ configure.in	2013-03-04 00:28:17.797489025 +0000
@@ -2533,15 +2533,15 @@
 LIBGIF=
 if test "${HAVE_X11}" = "yes" && test "${with_gif}" != "no"; then
   AC_CHECK_HEADER(gif_lib.h,
-# EGifPutExtensionLast only exists from version libungif-4.1.0b1.
+# EGifPutExtensionTrailer only exists from version libungif-5.
 # Earlier versions can crash Emacs.
-    [AC_CHECK_LIB(gif, EGifPutExtensionLast, HAVE_GIF=yes, HAVE_GIF=maybe)])
+    [AC_CHECK_LIB(gif, EGifPutExtensionTrailer, HAVE_GIF=yes, HAVE_GIF=maybe)])
 
   if test "$HAVE_GIF" = yes; then
     LIBGIF=-lgif
   elif test "$HAVE_GIF" = maybe; then
 # If gif_lib.h but no libgif, try libungif.
-    AC_CHECK_LIB(ungif, EGifPutExtensionLast, HAVE_GIF=yes, HAVE_GIF=no)
+    AC_CHECK_LIB(ungif, EGifPutExtensionTrailer, HAVE_GIF=yes, HAVE_GIF=no)
     test "$HAVE_GIF" = yes && LIBGIF=-lungif
   fi
 
